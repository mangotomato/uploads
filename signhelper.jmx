<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.0 r1840935">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">true</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223 Sampler" enabled="true">
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="script">&quot;use strict&quot;;

//log.info(&quot;&gt;&gt;&quot;+sampler.getParameters());
load(&quot;crypto-js-3.1.9-1.min.js&quot;);
var appKey = &quot;xxx&quot;;
var appSecret = &quot;default&quot;; // define request

// 还不知道怎么从Http Request动态获取请求数据？？？
var request = {
  method: &quot;POST&quot;,
  headers: {
    accept: &quot;application/json;chatset=utf-8&quot;,
    &quot;content-type&quot;: &quot;application/json;chatset=utf-8&quot;,
    &quot;content-md5&quot;: &quot;&quot;,
    &quot;x-gw-timestamp&quot;: &quot;&quot;
  },
  data: &quot;&quot;,
  url: &quot;192.168.2.206/gcpay/option&quot;
}; // define pm

var pm = {
  globals: {}
};
var md5 = calcMd5(); //var date = new Date().toString();

var date = &quot;&quot;;
var nonce = createUuid();
var millis = Date.now();
var textToSign = &quot;&quot;;
textToSign += request.method + &quot;\n&quot;;
textToSign += request.headers[&quot;accept&quot;] + &quot;\n&quot;;

if (request.method != &apos;GET&apos; &amp;&amp; request.headers[&quot;content-md5&quot;]) {
  textToSign += md5 + &quot;\n&quot;;
} else {
  textToSign += &quot;\n&quot;;
}

textToSign += request.headers[&quot;content-type&quot;] + &quot;\n&quot;;
textToSign += date + &quot;\n&quot;;
var headers = headersToSign();
var signatureHeaders;
var sortedKeys = Object.keys(headers).sort();

for (var i = 0; i &lt; sortedKeys.length; i++) {
  var headerName = sortedKeys[i];
  textToSign += headerName + &quot;:&quot; + headers[headerName] + &quot;\n&quot;;
  signatureHeaders = signatureHeaders ? signatureHeaders + &quot;,&quot; + headerName : headerName;
}

textToSign += urlToSign();
//log.info(&apos;\n&apos;+textToSign.replace(/\n/g,&apos;#&apos;));

var hash = CryptoJS.HmacSHA256(textToSign, appSecret);
var signature = hash.toString(CryptoJS.enc.Base64);
pm.globals[&apos;AppKey&apos;] = appKey;
pm.globals[&apos;Md5&apos;] = md5;
pm.globals[&quot;Date&quot;] = date;
pm.globals[&quot;Signature&quot;] = signature;
pm.globals[&quot;SignatureHeaders&quot;] = signatureHeaders;
pm.globals[&quot;Nonce&quot;] = nonce;
pm.globals[&quot;Timestamp&quot;] = millis;
vars.put(&quot;AppKey&quot;, appKey);
vars.put(&quot;Md5&quot;, md5);
vars.put(&quot;Date&quot;, date);
vars.put(&quot;Signature&quot;, signature);
vars.put(&quot;SignatureHeaders&quot;, signatureHeaders);
vars.put(&quot;Nonce&quot;, nonce);
vars.put(&quot;Timestamp&quot;, millis);

function headersToSign() {
  var headers = {};

  for (var name in request.headers) {
    name = name.toLowerCase();

    if (!name.startsWith(&apos;x-gw-&apos;)) {
      continue;
    }

    if (name === &quot;x-gw-signature&quot; || name === &quot;x-gw-signature-headers&quot; || name == &quot;x-gw-key&quot; || name === &apos;x-gw-nonce&apos;) {
      continue;
    }

    var value = request.headers[name];

    if (name === &apos;x-gw-timestamp&apos;) {
      headers[&apos;x-gw-timestamp&apos;] = millis;
      continue;
    }

    headers[name] = value;
  }

  headers[&apos;x-gw-key&apos;] = appKey;
  headers[&apos;x-gw-nonce&apos;] = nonce;
  return headers;
}

function urlToSign() {
  var params = {};
  var contentType = request.headers[&quot;content-type&quot;];

  if (contentType &amp;&amp; contentType.startsWith(&apos;application/x-www-form-urlencoded&apos;)) {
    var formParams = request.data.split(&quot;&amp;&quot;);
    formParams.forEach(function (p) {
      var ss = p.split(&apos;=&apos;);
      params[ss[0]] = ss[1];
    });
  }

  var ss = request.url.split(&apos;?&apos;);

  if (ss.length &gt; 1 &amp;&amp; ss[1]) {
    var queryParams = ss[1].split(&apos;&amp;&apos;);
    queryParams.forEach(function (p) {
      var ss = p.split(&apos;=&apos;);
      params[ss[0]] = ss[1];
    });
  }

  var sortedKeys = Object.keys(params);
  sortedKeys.sort();
  //ss[0] = ss[0].substring(8);
  var l1 = ss[0].indexOf(&apos;/&apos;);
  log.info(ss[0])
  var url = ss[0].substring(l1);
  var first = true;
  var qs;

  for (var i = 0; i &lt; sortedKeys.length; i++) {
    var k = sortedKeys[i];
    var s = k + &quot;=&quot; + params[k];
    qs = qs ? qs + &quot;&amp;&quot; + s : s;
  }

  return qs ? url + &quot;?&quot; + qs : url;
}

function calcMd5() {
  var contentType = request.headers[&quot;content-type&quot;];

  if (request.data &amp;&amp; !contentType.startsWith(&apos;application/x-www-form-urlencoded&apos;)) {
    var data = request.data;
    var md5 = CryptoJS.MD5(data);
    var md5String = md5.toString(CryptoJS.enc.Base64);
    return md5String;
  } else {
    return &quot;&quot;;
  }
}

function createUuid() {
  return &apos;xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx&apos;.replace(/[xy]/g, function (c) {
    var r = Math.random() * 16 | 0,
        v = c == &apos;x&apos; ? r : r &amp; 0x3 | 0x8;
    return v.toString(16);
  });
}</stringProp>
          <stringProp name="scriptLanguage">javascript</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="Date" elementType="Header">
              <stringProp name="Header.name">Date</stringProp>
              <stringProp name="Header.value">${Date}</stringProp>
            </elementProp>
            <elementProp name="X-Gw-Nonce" elementType="Header">
              <stringProp name="Header.name">X-Gw-Nonce</stringProp>
              <stringProp name="Header.value">${Nonce}</stringProp>
            </elementProp>
            <elementProp name="X-Gw-Key" elementType="Header">
              <stringProp name="Header.name">X-Gw-Key</stringProp>
              <stringProp name="Header.value">${AppKey}</stringProp>
            </elementProp>
            <elementProp name="X-Gw-Signature" elementType="Header">
              <stringProp name="Header.name">X-Gw-Signature</stringProp>
              <stringProp name="Header.value">${Signature}</stringProp>
            </elementProp>
            <elementProp name="X-Gw-Signature-Headers" elementType="Header">
              <stringProp name="Header.name">X-Gw-Signature-Headers</stringProp>
              <stringProp name="Header.value">${SignatureHeaders}</stringProp>
            </elementProp>
            <elementProp name="X-Gw-Timestamp" elementType="Header">
              <stringProp name="Header.name">X-Gw-Timestamp</stringProp>
              <stringProp name="Header.value">${Timestamp}</stringProp>
            </elementProp>
            <elementProp name="Content-Type" elementType="Header">
              <stringProp name="Header.name">Content-Type</stringProp>
              <stringProp name="Header.value">application/json;chatset=utf-8</stringProp>
            </elementProp>
            <elementProp name="Accept" elementType="Header">
              <stringProp name="Header.name">Accept</stringProp>
              <stringProp name="Header.value">application/json;chatset=utf-8</stringProp>
            </elementProp>
            <elementProp name="cache-control" elementType="Header">
              <stringProp name="Header.name">cache-control</stringProp>
              <stringProp name="Header.value">no-cache</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
	&quot;transMode&quot;: &quot;04&quot;,&#xd;
	&quot;hotelGroupCode&quot;: &quot;THEFG&quot;,&#xd;
	&quot;hotelCode&quot;: &quot;0680&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">192.168.2.206</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">http</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">gcpay/option</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
